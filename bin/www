#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config();
if(`${process.env.NODE_ENV}` !== 'production'){
  require("../variables");
}

var app = require('../app');

var connect = require('../socketIO/actions');

var debug = require('debug')('PRESENTIT:www');

var http = require('http');

const {Server} = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Setting up Socket.IO
//We send the server and the options for SokcetIO like the sites allowed by cors 
// Find more at https://socket.io/docs/v4/server-options/#cors

//Connect is my function that you can find at socketIO/actions.js
// this allows to set all tha actions that the server will receive
const socketIO = connect(new Server(server, {
  cors: {
    origin: process.env.DOMAIN_NAME,
    credentials: true
  }
}));
//Uncomment this line so you can get the socketIO en API request by req.app.get('socketio')
// app.set('socketio', socketIO);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // console.log("hey there");
}
